// Code generated by go-bindata.
// sources:
// cloud/google/templates/mysql.tmpl
// cloud/google/templates/postgres.tmpl
// DO NOT EDIT!

package google

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudGoogleTemplatesMysqlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xcf\x6b\xdb\x30\x14\xbe\xe7\xaf\x78\x87\x41\xb7\x43\xc3\x0a\x3d\x0c\xdf\x46\x6c\x4a\x21\x4b\x33\xdc\xee\x6a\x64\xfb\xd9\x13\x55\x24\xe7\x49\xf2\x48\x4b\xfe\xf7\x21\x4b\x76\x14\x67\x0d\xcc\x17\x4b\xef\xfb\xbe\xf7\x5b\x84\x5a\x59\xaa\x50\x27\x0b\x80\x5b\x30\x87\x0e\x13\xd0\x7b\xc1\xea\x1d\x97\xcb\xfe\xae\x44\xc3\xee\x97\x5c\x6a\xc3\x64\x85\x0b\x00\x00\xc9\x76\x98\xc0\xcd\xfb\x3b\x2c\xdd\x11\x8e\xc7\x9b\xc1\xde\x91\xea\x90\x0c\xf7\xbe\xdc\x47\xd8\x72\x25\x03\xd7\x5f\x26\x36\x40\xcd\x0c\x2b\x99\xc6\x5f\x48\xfa\x44\xab\xcb\xa2\xf7\x86\x88\x3a\xc6\x7f\x1e\xd2\x5b\xad\x9f\x5e\xd2\x22\xff\xb9\x2e\x1e\x37\xf9\xf3\xf7\xcd\x2a\x0b\xb4\x92\x55\xaf\x28\x6b\xcf\xca\xb3\xd5\xd3\x26\x2d\x1e\xb2\x4d\x40\x35\x1a\xc3\x65\x3b\x65\x07\x60\x38\x52\x08\xeb\x8e\x51\x40\xef\xcb\x76\x2b\x25\x1b\xde\x5a\x62\xc6\x65\x38\x81\x00\x28\x59\x29\xb0\x4e\xa0\x61\x42\x63\x04\x94\x5c\x32\x3a\xac\x55\x9b\xfd\x9b\xc1\x3f\xf6\xc9\xbb\xfe\x7e\x52\x19\xb2\xb1\x5b\xc2\xbd\xe5\x84\xb9\x16\x33\xc8\x75\x31\xe5\xfa\x35\xe7\x6f\xf8\x50\x26\x70\xf7\xf5\x02\xf2\xfd\xd8\xa6\x45\x9e\xa7\x13\xc8\x2a\xc3\xfb\x21\x85\xad\x12\xbc\x3a\x84\x3e\x9c\xcc\x45\x37\xd8\xcf\x9a\x22\x54\xe5\x25\x84\x0d\x12\xca\x0a\xe3\xfc\xdf\x94\xc4\x04\x9c\x17\x77\x82\xe3\x71\x71\x6d\xa7\xc6\xf1\x47\x3b\x15\xad\xd4\xed\x19\x7c\xb9\x5a\x27\xc1\x48\x74\xf1\xce\xb7\x25\x81\x4f\x9f\x09\x9b\x65\xe4\x76\xf8\x7f\x09\xbc\xea\x37\x23\x8d\x26\x01\x6b\x9a\x6f\xbb\xf2\x7e\x34\x2b\x21\xfc\x6c\x46\xa0\x68\x51\x22\x31\x51\x54\xfc\x6a\x49\x56\x23\x7d\x50\xce\x04\x5d\x2b\xc5\x91\x82\x20\x60\x1d\xd3\xfa\x8f\xa2\xda\xe3\xe3\xed\x7f\x4a\x5d\x28\x6b\x3a\x6b\xc2\xfb\xf6\xb1\x32\xd9\xff\x38\xe8\xbd\x78\x8c\x9f\x75\xcf\x84\xbd\xda\xb2\xb9\x3a\x8d\x27\x14\xd4\x97\x03\x99\xab\xb6\xa1\x86\xb9\xea\xbc\xb6\xb9\xea\x25\x74\x66\xae\x8a\x3b\xf6\x37\x00\x00\xff\xff\x5c\xf3\xaf\x1c\xcb\x04\x00\x00")

func cloudGoogleTemplatesMysqlTmplBytes() ([]byte, error) {
	return bindataRead(
		_cloudGoogleTemplatesMysqlTmpl,
		"cloud/google/templates/mysql.tmpl",
	)
}

func cloudGoogleTemplatesMysqlTmpl() (*asset, error) {
	bytes, err := cloudGoogleTemplatesMysqlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud/google/templates/mysql.tmpl", size: 1227, mode: os.FileMode(420), modTime: time.Unix(1500575743, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cloudGoogleTemplatesPostgresTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\xc1\x6e\xea\x30\x10\xbc\xf3\x15\x7b\x78\x12\xaf\x07\x22\x55\xea\x29\xb7\x0a\x38\x20\x21\x4a\x05\xf4\x8a\x9c\x64\x89\xac\x06\x3b\x5d\xaf\x53\xb5\x28\xff\x5e\x39\x31\xc1\x4d\xd3\x48\xe5\xc2\x7a\x77\x66\x76\x3c\x31\xa1\xd1\x96\x52\x34\xf1\x04\x60\x06\xfc\x51\x62\x0c\xe6\xad\x10\xd9\x59\xaa\xa8\xba\x4f\x90\xc5\x43\x24\x95\x61\xa1\x52\x9c\x00\x00\x28\x71\xc6\x18\xa6\x97\x0b\x44\xae\x84\xba\x9e\x36\xfd\x92\x74\x89\xc4\xb2\xd5\x72\x3f\xc2\x5c\x6a\xe5\xb1\xed\xa1\x43\x03\x64\x82\x45\x22\x0c\xbe\x20\x99\x1b\x2c\x4b\x8e\x55\xdb\x08\xa0\xd7\xfd\xfb\xc6\xde\x7c\xfd\x74\x58\x1c\x77\xcf\xeb\xe3\x6a\xb3\xdb\x3f\x6e\xe6\x4b\x0f\x33\xc8\x2c\x55\xde\xed\x07\x60\x89\xe4\x85\x5d\x19\x48\x02\x24\x22\x7d\xb5\xe5\x5c\xab\x93\xcc\x2d\x09\x76\x1e\xba\x21\x00\x2a\x91\x14\x98\xc5\xc0\x64\xb1\xeb\x17\x3a\x6d\x90\x5b\xc2\x13\x12\xaa\x14\x43\xce\xa7\x56\x18\x83\xdb\xe6\x2a\xa8\xeb\xc9\x58\xaa\xd7\x00\x82\x54\x83\x50\x67\x4d\x1a\x1e\xe2\xa4\x86\x33\xbe\xf1\xfa\xd8\x5b\x6c\x31\xfc\xfb\x4f\x78\x8a\x02\xf5\xe6\xff\x6e\xd4\x9e\x35\x48\xbf\x58\xeb\x46\x63\x7e\x1c\xc8\x13\xfc\xac\x14\xc6\xbc\x6b\xca\xda\xf9\xf5\xf4\x27\xbf\xda\x72\x69\xd9\xbf\xd6\x76\xd7\x52\x55\x5b\x6d\x38\x27\x34\xab\xf0\x9d\x56\xa2\xb0\x23\x52\x83\x02\x8b\xf0\x93\x78\x81\x9f\xd9\x0e\x10\xb7\xfe\x32\x7d\xe2\xf7\x4b\x0e\x10\x0f\x3e\xa5\x3e\x31\x4c\xef\x2b\x00\x00\xff\xff\x19\xfa\xb8\x9c\xa5\x03\x00\x00")

func cloudGoogleTemplatesPostgresTmplBytes() ([]byte, error) {
	return bindataRead(
		_cloudGoogleTemplatesPostgresTmpl,
		"cloud/google/templates/postgres.tmpl",
	)
}

func cloudGoogleTemplatesPostgresTmpl() (*asset, error) {
	bytes, err := cloudGoogleTemplatesPostgresTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud/google/templates/postgres.tmpl", size: 933, mode: os.FileMode(420), modTime: time.Unix(1500579287, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud/google/templates/mysql.tmpl":    cloudGoogleTemplatesMysqlTmpl,
	"cloud/google/templates/postgres.tmpl": cloudGoogleTemplatesPostgresTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud": &bintree{nil, map[string]*bintree{
		"google": &bintree{nil, map[string]*bintree{
			"templates": &bintree{nil, map[string]*bintree{
				"mysql.tmpl":    &bintree{cloudGoogleTemplatesMysqlTmpl, map[string]*bintree{}},
				"postgres.tmpl": &bintree{cloudGoogleTemplatesPostgresTmpl, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
