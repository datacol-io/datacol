// Code generated by go-bindata.
// sources:
// cloud/google/templates/mysql.tmpl
// cloud/google/templates/postgres.tmpl
// DO NOT EDIT!

package google

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudGoogleTemplatesMysqlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x4d\x8b\xdb\x30\x10\xbd\xe7\x57\xcc\xa1\xb0\xed\x21\xa1\x0b\x39\x14\xdf\x4a\x6c\x96\x85\x34\x49\xf1\x6e\xaf\x46\xb6\xc7\xae\xba\x8a\xe4\x8c\x24\x97\xec\x92\xff\x5e\x6c\x4b\xae\xea\x7c\x40\x4b\x4f\x91\xe6\xbd\x37\xf3\x66\x34\x31\xa1\x56\x96\x0a\xd4\xd1\x0c\x60\x0e\xe6\xd8\x60\x04\xfa\x20\x58\xb9\xe7\x72\xd1\xde\xe7\x68\xd8\x72\xc1\xa5\x36\x4c\x16\x38\x03\x00\x90\x6c\x8f\x11\xdc\xbd\xbd\xc1\xa2\x3b\xc2\xe9\x74\xd7\xc7\x1b\x52\x0d\x92\xe1\x43\x2e\x17\xf9\x81\x85\x71\x64\x77\x1b\xf9\x00\x84\x35\x57\xd2\xc1\xc3\x25\x40\x4b\x66\x58\xce\x34\x7e\x43\xd2\xbf\x69\x65\x9e\xb5\x43\x20\xa0\x7a\x7f\x4f\xbd\xfd\xd5\x7a\xfb\x1c\x67\xe9\xd7\x75\xf6\xb8\x49\x9f\x3e\x6f\x56\x89\xa3\xe5\xac\x78\x41\x59\x0e\xac\x34\x59\x6d\x37\x71\xf6\x90\x6c\x1c\xaa\xd1\x18\x2e\xeb\xd1\x3d\x80\xe1\x48\xae\x6c\x77\x0c\x0a\x0e\xb9\x6c\xb3\x52\xb2\xe2\xb5\x25\x66\x3a\x87\x23\x08\x80\x92\xe5\x02\xcb\x08\x2a\x26\x34\x06\x40\xce\x25\xa3\xe3\x5a\xd5\xc9\x65\x06\xbf\x9e\x93\x37\xed\x72\x54\x19\xb2\x61\x5a\xc2\x83\xe5\x84\xa9\x16\x13\xa8\x9b\x62\xcc\xf5\x4b\xca\x5f\xf1\x21\x8f\xe0\xfe\xe3\x19\x34\xcc\x63\x17\x67\x69\x1a\x8f\xa0\x50\x45\x6f\x60\x47\x58\x21\xa1\x2c\x30\xb4\xf2\xaa\xa4\xdf\x81\xee\xd8\x4f\xe6\xd6\x02\xf9\xb7\xbc\xb2\x40\x73\x8f\xff\xeb\x26\x05\x29\x7d\xaa\x0b\xeb\x11\xc1\xbb\xf7\x84\xd5\x22\xa8\xdc\xff\x7e\x70\xbc\xe2\x3b\x23\x8d\x26\x02\x6b\xaa\x4f\xfb\x7c\xe9\xc3\x4a\x88\xe1\x31\x3c\x90\xd5\x28\x91\x98\xc8\x0a\x7e\xb3\x6d\xab\x91\xae\xb5\xdc\x61\x83\xc1\x3d\x1a\xd6\xb9\xf6\xcd\x96\xd8\xa0\x2c\xf5\x36\x78\xfc\xf9\x85\xff\xdb\x79\xfc\x7f\x8e\xb1\xb3\x37\x29\xd7\x30\xad\x7f\x2a\x2a\xbd\xdc\x5d\xff\x6a\xd0\x33\x65\x4d\x63\x8d\xfb\xdc\x0c\xf5\x12\xd9\x7e\x39\xea\x83\x78\x0c\xbf\x32\x2d\x13\xf6\xe6\x83\x4d\xd5\x71\xb8\x62\x4e\x7d\x69\x21\xa6\xba\x9d\x6b\xe3\x4c\x37\xe9\x6f\xaa\x7b\x76\x03\x3a\xd3\xfd\x31\xb9\x5f\x01\x00\x00\xff\xff\xfd\xdf\x22\x66\x60\x05\x00\x00")

func cloudGoogleTemplatesMysqlTmplBytes() ([]byte, error) {
	return bindataRead(
		_cloudGoogleTemplatesMysqlTmpl,
		"cloud/google/templates/mysql.tmpl",
	)
}

func cloudGoogleTemplatesMysqlTmpl() (*asset, error) {
	bytes, err := cloudGoogleTemplatesMysqlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud/google/templates/mysql.tmpl", size: 1376, mode: os.FileMode(420), modTime: time.Unix(1500621425, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cloudGoogleTemplatesPostgresTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\xcf\x6f\x82\x30\x14\xc7\xef\xfe\x15\xef\xb0\x84\xed\x20\xc9\x92\x9d\xb8\x2d\xea\xc1\xc4\xa8\x8b\xba\xab\x29\xf0\x24\x6c\xd8\xb2\xd7\x57\x96\xcd\xf0\xbf\x2f\x40\xc1\xaa\x8c\x64\xc9\x4e\xb4\xef\xc7\xf7\x7d\xfb\xa1\x25\xd4\xca\x50\x84\x3a\x18\x01\x8c\x81\xbf\x72\x0c\x40\x7f\x64\x22\x3e\xa6\xd2\x2f\x1e\x43\x64\xf1\xe4\xa7\x52\xb3\x90\x11\x8e\x00\x00\xa4\x38\x62\x00\xde\xe9\x04\x7e\xb5\x84\xb2\xf4\xea\x78\x4e\x2a\x47\xe2\xb4\xd1\xb2\x91\x37\x8c\xd8\x16\xdb\x5d\x57\x0f\x40\x98\xa4\x4a\xda\x74\xb3\x71\xb2\xb1\x60\x11\x0a\x8d\xaf\x48\xfa\x5c\x16\x87\xfb\xa2\x09\x38\xa5\xad\xbf\x6d\x6d\x7f\xb2\x58\xed\xa6\xfb\xcd\xcb\x62\x3f\x5f\x6e\xb6\xcf\xcb\xc9\xcc\x96\x69\x64\x4e\x65\xd2\xf9\x03\xe0\x14\xc9\x0a\x57\x4b\x47\x12\x20\x14\xd1\xbb\xc9\x27\x4a\x1e\xd2\xc4\x90\xe0\xca\x43\x97\x04\x40\x29\xc2\x0c\xe3\x00\x98\x0c\x76\xf1\x4c\x45\x75\xe5\x9a\xf0\x80\x84\x32\x42\xb7\xe7\x5b\xc9\x16\x5d\xb5\xac\xc7\x0d\x71\x6f\x11\x38\xdc\x1d\xec\xe3\x8b\xf4\xdf\xf1\x9f\x05\x5b\x21\x28\xcb\x2b\xa2\x01\xdc\xdd\x13\x1e\x7c\x67\x6c\xfd\x7d\x18\xf4\x6d\x34\xd2\x2f\x9e\xbb\xd4\x11\x59\x54\x73\x5b\xb7\x31\xe6\x28\x63\xbd\x72\x20\x8f\xdd\xce\xfe\xe8\xff\x30\xa8\x93\x95\xb3\x8b\x0b\x0d\x90\x0b\xad\x3f\x15\xc5\x6d\xbb\xdd\xf6\xdc\xbc\x01\x4e\xca\x70\x6e\xd8\x3e\xb0\x66\xde\x4c\x16\x6b\xa5\x39\x21\xd4\x73\xf7\x69\x15\x22\x33\x03\x52\xbd\x02\x53\x17\x80\x15\xf0\xae\x7e\xaa\xd7\xdf\xba\xb6\xe7\xb9\x69\xbd\x3a\x68\x4f\xeb\xce\xc2\xba\x69\xbd\xa0\xf8\x13\x00\x00\xff\xff\x23\x4a\xa0\xa9\x5e\x04\x00\x00")

func cloudGoogleTemplatesPostgresTmplBytes() ([]byte, error) {
	return bindataRead(
		_cloudGoogleTemplatesPostgresTmpl,
		"cloud/google/templates/postgres.tmpl",
	)
}

func cloudGoogleTemplatesPostgresTmpl() (*asset, error) {
	bytes, err := cloudGoogleTemplatesPostgresTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud/google/templates/postgres.tmpl", size: 1118, mode: os.FileMode(420), modTime: time.Unix(1500622105, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud/google/templates/mysql.tmpl":    cloudGoogleTemplatesMysqlTmpl,
	"cloud/google/templates/postgres.tmpl": cloudGoogleTemplatesPostgresTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud": &bintree{nil, map[string]*bintree{
		"google": &bintree{nil, map[string]*bintree{
			"templates": &bintree{nil, map[string]*bintree{
				"mysql.tmpl":    &bintree{cloudGoogleTemplatesMysqlTmpl, map[string]*bintree{}},
				"postgres.tmpl": &bintree{cloudGoogleTemplatesPostgresTmpl, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
