// Code generated by go-bindata.
// sources:
// cloud/google/templates/config.j2
// cloud/google/templates/container-vm.j2
// cloud/google/templates/mysql.tmpl
// cloud/google/templates/postgres.tmpl
// cloud/google/templates/registry.j2
// DO NOT EDIT!

package google

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudGoogleTemplatesConfigJ2 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xcd\x4e\xc3\x30\x10\x84\xef\x79\x8a\x7d\x81\xe6\x01\x72\xe4\xe7\x48\x84\x04\x27\x6e\xae\x33\xc0\xa6\xf5\x8f\xd6\x6b\x44\x6b\xe5\xdd\x91\x9b\x18\x90\xda\xe3\x7c\x33\x63\x8f\xb6\x13\xa4\x90\xc5\x22\x0d\xdd\x8e\xf4\x14\x31\x90\xe0\x83\x93\xca\xa9\x9f\xd9\xcf\xa6\x23\xf2\xc6\x61\xa0\x52\xa8\xbf\xcb\xf6\x00\xa5\x65\xe9\x88\xa2\x84\x08\x51\xae\x55\xa2\x8b\x9e\x61\x75\xcc\x6e\x0f\x59\xe3\xcf\xff\xd1\xda\x22\x3a\x07\xbf\xbd\xf6\x16\x3c\x2a\xed\x4a\x21\x7e\xa7\xfe\xfe\x98\x93\x42\xc6\xa0\x8f\xdf\x9c\x34\x55\xaf\x8d\xb2\xc1\xab\x61\x0f\xd9\x7d\xb9\x1b\xc3\x5a\xd5\x38\xdc\x5e\x77\xfd\x6b\xa5\x3e\xbb\x31\x4c\x48\xab\x33\x6e\xaa\xb9\x13\xa7\xc3\x0b\x9f\xb7\xde\xc3\xa6\x9a\xeb\x8c\xfd\x64\x8f\xd7\xcb\xbc\x1a\x78\xfa\x03\x2d\x13\x05\x70\x51\x79\x7f\x44\xbb\xc8\x2f\xa8\x99\x52\x08\x7e\xa2\x65\xf9\x09\x00\x00\xff\xff\x19\x6b\x5b\x98\x88\x01\x00\x00")

func cloudGoogleTemplatesConfigJ2Bytes() ([]byte, error) {
	return bindataRead(
		_cloudGoogleTemplatesConfigJ2,
		"cloud/google/templates/config.j2",
	)
}

func cloudGoogleTemplatesConfigJ2() (*asset, error) {
	bytes, err := cloudGoogleTemplatesConfigJ2Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud/google/templates/config.j2", size: 392, mode: os.FileMode(420), modTime: time.Unix(1490381351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cloudGoogleTemplatesContainerVmJ2 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\xcf\x8a\xdb\x30\x10\x87\xef\x7e\x8a\x61\x61\xf1\xa1\xc4\xa1\x57\x43\x0f\x21\x84\x52\xda\x4d\xcb\x26\x2d\x94\x65\x09\xb2\x3c\xeb\x0c\x95\x35\x42\x1a\x25\x64\x83\xdf\xbd\x68\x6d\x37\x49\x03\x0b\xd1\xd1\xbf\xf9\xbe\x19\xfd\xf1\xf1\x1e\x02\x0a\xcc\xbf\xfd\x5c\xad\x17\x8f\x9b\xe5\xec\x61\x01\x9f\x00\xed\xee\x29\xb7\xaa\xc5\xfc\x19\xee\xbb\x6c\x28\x5a\xff\xfe\xb1\x18\x2b\x2e\x80\x0f\x90\x4f\xe4\xe0\x30\x4f\xc5\x99\xc7\xc0\xd1\x6b\x0c\x65\x36\x81\x24\x29\xe1\x78\xbc\x04\xba\x2e\x03\x48\x44\x09\x9a\xad\x28\xb2\xe8\x8b\xdd\xc7\x42\x9b\x18\x04\x7d\x06\xe0\x3c\x3b\xf4\x42\xc9\x02\x00\xf0\xca\xb6\xf7\x9c\x82\xa7\x3c\x7d\xcc\x9f\x7b\x1b\xc0\x00\xf7\xf5\xf0\x5e\xe7\xb4\x6a\x0c\xda\x93\x13\x62\x5b\xc2\xdd\xc0\x82\xf6\xa8\x04\x6b\xa8\x0e\x50\x2b\x51\x9a\x4d\x41\x7c\x37\x20\x64\x49\x48\x99\x25\xd7\x38\xe7\x68\xe5\x6a\x1e\x1b\xdb\x14\x86\xd3\x4c\x00\x68\x55\x65\xf0\x6b\xac\xd0\x5b\x14\x0c\x33\xe3\xb6\xaa\x84\x17\x65\x02\x8e\x93\xbe\x09\xed\x0b\x35\xe3\xec\x69\xff\x88\xad\x13\xaa\xcc\xf5\xb6\xcf\xb2\xf3\x4e\x00\xad\xd2\x5b\xb2\xb8\x7e\x3b\xd8\xff\xa0\xb3\xec\x12\xa2\x56\x35\x03\x32\xff\xbe\x5c\xcf\xbe\x2c\x17\x8f\x9b\x5f\x0f\xff\xf2\x9a\xc2\x9f\x15\xbd\xe2\xe7\xea\xca\x39\x46\x97\x42\x56\x51\xb6\x2b\xcd\x6e\xbc\xbb\x7e\x4d\x60\x2b\xe2\x42\x39\x9d\xee\xf7\xfb\xa2\x61\x6e\x0c\x2a\x47\xa1\xd0\xdc\x4e\x13\x32\xd5\xdc\xba\x28\x78\x13\x53\xe3\x2e\x08\x7b\xd5\x60\xe1\x51\xd5\x1b\xb6\xe6\x70\x93\xc0\x70\xd3\x90\x6d\x8a\xbd\xa7\x1b\x5b\xb7\x6c\x49\xd8\x93\x6d\xb2\x8c\xa3\xb8\x28\x67\x2f\x7e\x78\x50\xe9\x5c\x33\x80\x9d\x32\xb1\xbf\x92\xd3\x3f\xd4\x75\x7f\x03\x00\x00\xff\xff\x61\xb6\xba\x48\x7c\x03\x00\x00")

func cloudGoogleTemplatesContainerVmJ2Bytes() ([]byte, error) {
	return bindataRead(
		_cloudGoogleTemplatesContainerVmJ2,
		"cloud/google/templates/container-vm.j2",
	)
}

func cloudGoogleTemplatesContainerVmJ2() (*asset, error) {
	bytes, err := cloudGoogleTemplatesContainerVmJ2Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud/google/templates/container-vm.j2", size: 892, mode: os.FileMode(420), modTime: time.Unix(1490392196, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cloudGoogleTemplatesMysqlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xc1\x6a\xdc\x30\x10\xbd\xfb\x2b\xe6\x50\x48\x7b\xc8\xd2\xc0\x1e\x8a\x6e\x65\xbd\x84\xc2\xe2\xa4\x38\xed\x55\x48\xf2\xd8\x1d\xa2\x95\x1c\x49\x36\x6c\x82\xff\xbd\x58\xd2\xda\x9b\x36\x7b\xb2\xfc\xde\x9b\x37\x23\xcd\xbb\x85\x70\xea\x91\x81\x7f\xd1\xa2\x39\x92\xd9\x8c\x77\x12\x83\xd8\x6e\xc8\xf8\x20\x8c\xc2\x02\xc0\x88\x23\x32\xb8\x79\x7b\x83\xcd\x7c\x84\x69\xba\x29\x00\x7a\x67\x7b\x74\x81\xd0\xb3\x02\x00\xc0\x61\x47\xd6\x64\x5d\xfa\xc9\x4a\x80\x46\x04\x21\x85\xc7\xdf\xe8\xfc\x2a\x6a\x24\x1f\x13\xb0\x08\xcf\x5d\x9f\xe2\x50\xbb\xc3\xc3\xaf\x92\xd7\x3f\x0f\xfc\x47\x55\x3f\x7d\xaf\x76\xfb\x28\x92\x42\x3d\xa3\x69\x92\xa6\xde\xef\x1e\xaa\x92\xdf\xef\xab\xc8\x79\x0c\x81\x4c\x97\x67\x02\x08\x84\x2e\xb7\x9b\x8f\x4b\xa3\xe4\x32\xf4\x3b\x6b\x5a\xea\x06\x27\xc2\x3c\x57\xa6\x00\xd0\x08\xa9\xb1\x61\xd0\x0a\xed\x71\x81\x25\x19\xe1\x4e\x07\xdb\xed\x3f\xe2\xe9\x9a\x1b\xf5\xe3\x76\xa9\x08\x6e\x58\x0d\x1d\xbe\x0c\xe4\xb0\xf6\xfa\x1d\x31\xbf\x57\x49\xfe\xb9\xa6\x57\xbc\x97\x0c\xee\xbe\xfe\x43\xa4\xbb\x3f\x96\xbc\xae\xcb\x4c\x09\x15\x68\x8c\x8d\x1f\xad\x26\x75\xca\xb7\x5e\x61\xde\x47\xfc\xe2\x09\xb4\x55\xa9\xc0\x61\x8b\x0e\x8d\xc2\x75\xe6\x57\x6b\x90\xc1\xec\x30\x9f\x60\x9a\x8a\xab\x51\x39\x6f\x77\x89\xca\x45\x52\x6e\xe3\xa2\xb3\x60\x76\xf9\x3f\x38\x6b\xcd\x7b\xdd\x9a\x06\x06\x9f\x3e\x3b\x6c\x37\x17\xbe\xf1\xfb\x25\xaa\xd4\x1f\xe1\x3c\x06\x06\x43\x68\xbf\x1d\xe5\x36\x81\x56\xeb\xb4\x85\x33\xcc\x3b\x34\xe8\x84\xe6\x8a\x8a\xbf\x01\x00\x00\xff\xff\xc5\x63\xff\x46\xf6\x02\x00\x00")

func cloudGoogleTemplatesMysqlTmplBytes() ([]byte, error) {
	return bindataRead(
		_cloudGoogleTemplatesMysqlTmpl,
		"cloud/google/templates/mysql.tmpl",
	)
}

func cloudGoogleTemplatesMysqlTmpl() (*asset, error) {
	bytes, err := cloudGoogleTemplatesMysqlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud/google/templates/mysql.tmpl", size: 758, mode: os.FileMode(420), modTime: time.Unix(1500220644, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cloudGoogleTemplatesPostgresTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\x41\x6f\xb3\x30\x0c\xbd\xf3\x2b\x7c\xf8\xa4\x7e\x3b\x14\xad\x52\x4f\xb9\x4d\xa5\x9a\x26\x55\x5d\x27\xba\x5d\x51\x02\x06\x59\xa5\x09\x4d\x02\x52\x5b\xf1\xdf\xa7\x40\x0a\x74\x5b\x4f\x18\xbf\xe7\x67\xc7\x7e\x73\xb0\xe7\x0a\x19\x98\x53\xc9\xb3\x23\xc9\xb0\x59\x08\xb4\x7c\x19\x92\x34\x96\xcb\x14\x03\x00\xc9\x8f\xc8\x60\x76\xbd\x42\xe8\x42\x68\xdb\x59\x00\x50\x69\x55\xa1\xb6\x84\x86\x05\x00\x00\x1a\x0b\x52\xd2\xf3\xfa\x1f\xcf\x04\xc8\xb8\xe5\x82\x1b\xfc\x42\x6d\x46\x52\x26\x92\xa6\x4f\x0c\xc4\x5b\xd7\x7d\x37\xd4\x6a\xf3\xfe\x19\x25\xf1\xc7\x26\x79\xdb\xc6\xfb\x97\xed\x6a\xdd\x91\x0c\x5a\x4b\xb2\xf0\x7d\x01\x2c\xa1\xf6\x92\x2e\x1c\xc4\x00\x04\x4f\x0f\x75\xb5\x52\x32\xa7\xa2\xd6\xdc\xba\xde\x1e\x02\x40\xc9\x45\x89\x19\x03\xab\x6b\x1c\xb2\x82\x24\xd7\xe7\x8d\x2a\xd6\x7f\xc0\xf4\x48\x8b\xaa\x66\x39\x14\xe4\xbc\x34\xa3\xa0\xc6\x53\x4d\x1a\x63\x53\xde\x23\x6e\x27\x11\x99\x43\x4c\x17\x7c\x15\x0c\x16\xcf\x3f\x80\x7e\x07\xbb\x28\x89\xe3\xc8\x43\x3c\xb5\xd4\x74\xad\x77\xaa\xa4\xf4\xec\x5f\x3d\xa6\x93\xaa\xcb\x4f\x56\x50\xaa\xb4\x2f\xd0\x98\xa3\x46\x99\xe2\x38\xf5\x45\x49\x64\xe0\x14\x5c\x04\x6d\x1b\x3c\xb4\xc3\xed\x82\x83\x1d\x26\x6e\x98\x77\xc7\xf4\x04\xa7\xf2\xdb\x1c\x63\xcd\x3d\x6f\xbc\x38\x83\x7f\xff\x35\xe6\xe1\x44\xb7\xfb\x3e\x7d\x07\x00\x00\xff\xff\x33\x9a\x7b\x84\xa2\x02\x00\x00")

func cloudGoogleTemplatesPostgresTmplBytes() ([]byte, error) {
	return bindataRead(
		_cloudGoogleTemplatesPostgresTmpl,
		"cloud/google/templates/postgres.tmpl",
	)
}

func cloudGoogleTemplatesPostgresTmpl() (*asset, error) {
	bytes, err := cloudGoogleTemplatesPostgresTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud/google/templates/postgres.tmpl", size: 674, mode: os.FileMode(420), modTime: time.Unix(1500220644, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cloudGoogleTemplatesRegistryJ2 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcc\x41\x0a\xc2\x30\x14\x84\xe1\x7d\x4e\x31\xbb\xae\x2c\xb8\xcd\x19\xc4\x0b\x14\x17\x69\x18\xa4\x6a\xf3\xc2\xcb\x4b\x41\x4a\xef\x2e\x6d\x15\x11\x97\xc3\xf0\x7f\x4e\x59\xa4\x6a\x64\xf1\xee\x80\x14\x46\x7a\xcc\x33\x98\xa6\xae\x59\x57\x73\xc1\xb2\x38\xc0\x9e\x99\x1e\xc5\x44\xc3\x95\xed\x74\x6c\xfb\x1a\xef\x34\x07\x64\x95\x4c\xb5\x61\x15\x00\xe0\x21\x31\xd8\x20\x69\x73\xbe\x67\xd7\xec\xc5\xe9\x7d\x7f\xe0\x0d\xb8\x31\xda\xb9\x8e\x3d\xf5\xaf\xfa\x79\xf7\xe8\x15\x00\x00\xff\xff\x6e\xf2\xde\x13\xb4\x00\x00\x00")

func cloudGoogleTemplatesRegistryJ2Bytes() ([]byte, error) {
	return bindataRead(
		_cloudGoogleTemplatesRegistryJ2,
		"cloud/google/templates/registry.j2",
	)
}

func cloudGoogleTemplatesRegistryJ2() (*asset, error) {
	bytes, err := cloudGoogleTemplatesRegistryJ2Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud/google/templates/registry.j2", size: 180, mode: os.FileMode(420), modTime: time.Unix(1489236187, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud/google/templates/config.j2": cloudGoogleTemplatesConfigJ2,
	"cloud/google/templates/container-vm.j2": cloudGoogleTemplatesContainerVmJ2,
	"cloud/google/templates/mysql.tmpl": cloudGoogleTemplatesMysqlTmpl,
	"cloud/google/templates/postgres.tmpl": cloudGoogleTemplatesPostgresTmpl,
	"cloud/google/templates/registry.j2": cloudGoogleTemplatesRegistryJ2,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"cloud": &bintree{nil, map[string]*bintree{
		"google": &bintree{nil, map[string]*bintree{
			"templates": &bintree{nil, map[string]*bintree{
				"config.j2": &bintree{cloudGoogleTemplatesConfigJ2, map[string]*bintree{}},
				"container-vm.j2": &bintree{cloudGoogleTemplatesContainerVmJ2, map[string]*bintree{}},
				"mysql.tmpl": &bintree{cloudGoogleTemplatesMysqlTmpl, map[string]*bintree{}},
				"postgres.tmpl": &bintree{cloudGoogleTemplatesPostgresTmpl, map[string]*bintree{}},
				"registry.j2": &bintree{cloudGoogleTemplatesRegistryJ2, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

