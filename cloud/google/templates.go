// Code generated by go-bindata.
// sources:
// cloud/google/templates/mysql.tmpl
// cloud/google/templates/postgres.tmpl
// DO NOT EDIT!

package google

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudGoogleTemplatesMysqlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x4d\x6f\xdb\x30\x0c\xbd\xe7\x57\xf0\xb0\xa1\xdb\x21\xc1\x0a\xe4\x30\xf8\x36\xc4\x46\x51\x20\x4b\x32\xb8\xdd\xd5\x90\x6d\xda\xd5\xaa\x48\x0e\x25\x79\x48\x8b\xfe\xf7\xc1\xb6\xe4\x69\xce\xc7\xa1\xd8\x29\x12\xdf\x7b\xe4\x23\xc5\x98\x50\x2b\x4b\x05\xea\x68\x06\x30\x07\x73\x6c\x30\x02\x7d\x10\xac\xdc\x73\xb9\x68\x6f\x73\x34\x6c\xb9\xe0\x52\x1b\x26\x0b\x9c\x01\x00\x48\xb6\xc7\x08\x6e\x5e\x5f\x61\xd1\x1d\xe1\xed\xed\xa6\x8f\x37\xa4\x1a\x24\xc3\x87\x5c\x2e\xf2\x0b\x0b\xe3\xc8\xee\x36\xf2\x01\x08\x6b\xae\xa4\x83\x87\x4b\x80\x96\xcc\xb0\x9c\x69\xfc\x89\xa4\xff\xd2\xca\x3c\x6b\x87\x40\x40\xf5\xfe\x1e\x7a\xfb\xab\xf5\xf6\x31\xce\xd2\x1f\xeb\xec\x7e\x93\x3e\x7c\xdb\xac\x12\x47\xcb\x59\xf1\x8c\xb2\x1c\x58\x69\xb2\xda\x6e\xe2\xec\x2e\xd9\x38\x54\xa3\x31\x5c\xd6\xa3\x7b\x00\xc3\x91\x5c\xd9\xee\x18\x14\x1c\x72\xd9\x66\xa5\x64\xc5\x6b\x4b\xcc\x74\x0e\x47\x10\x00\x25\xcb\x05\x96\x11\x54\x4c\x68\x0c\x80\x9c\x4b\x46\xc7\xb5\xaa\x93\xf3\x0c\x7e\x39\x27\x6f\xda\xe5\xa8\x32\x64\xc3\xb4\x84\x07\xcb\x09\x53\x2d\x26\x50\x37\xc5\x98\xeb\xe7\x94\xbf\xe0\x5d\x1e\xc1\xed\x97\x13\x68\x98\xc7\x2e\xce\xd2\x34\x1e\x41\xa1\x8a\xde\xc0\x8e\xb0\x42\x42\x59\x60\x68\xe5\x45\x49\xbf\x03\xdd\xb1\x9f\xcc\xb5\x05\xf2\x6f\x79\x61\x81\xe6\x1e\x7f\xef\x26\x05\x29\x7d\xaa\x33\xeb\x11\xc1\x87\x4f\x84\xd5\x22\xa8\xdc\xff\x7e\x76\xbc\xe2\x89\x91\x46\x13\x81\x35\xd5\xd7\x7d\xbe\xf4\x61\x25\xc4\xf0\x18\x1e\xc8\x6a\x94\x48\x4c\x64\x05\xbf\xda\xb6\xd5\x48\x97\x5a\xee\xb0\xc1\xe0\x1e\x0d\xeb\x5c\xfb\x66\x4b\x6c\x50\x96\x7a\x1b\x3c\xfe\xfc\xcc\xff\xed\x34\xfe\x3f\xc7\xd8\xd9\x9b\x94\x6b\x98\xd6\xbf\x15\x95\x5e\xee\xae\xef\x18\xf4\x93\xd2\x9d\x89\x8f\x37\xb3\x99\xb2\xa6\xb1\xc6\x7d\x7e\x86\xfa\x89\x6c\xbf\x1f\xf5\x41\xdc\x87\x5f\x9d\x96\x09\x7b\x35\xef\x54\x1d\x87\x2b\xe7\xd4\xe7\x16\x64\xaa\xdb\xb9\xb6\x4e\x74\x93\x7e\xa7\xba\x47\x37\xb0\x13\xdd\x3f\x93\xfc\x13\x00\x00\xff\xff\xc2\x01\xc6\xa4\x70\x05\x00\x00")

func cloudGoogleTemplatesMysqlTmplBytes() ([]byte, error) {
	return bindataRead(
		_cloudGoogleTemplatesMysqlTmpl,
		"cloud/google/templates/mysql.tmpl",
	)
}

func cloudGoogleTemplatesMysqlTmpl() (*asset, error) {
	bytes, err := cloudGoogleTemplatesMysqlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud/google/templates/mysql.tmpl", size: 1392, mode: os.FileMode(436), modTime: time.Unix(1520015640, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cloudGoogleTemplatesPostgresTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\xc1\x6e\xe2\x30\x10\xbd\xe7\x2b\xe6\xb0\xab\xec\x1e\x88\xb4\xd2\x9e\x72\xab\x80\x03\x12\x02\x2a\xa0\x57\xe4\x24\x43\x9a\x36\xd8\xe9\x78\x9c\xaa\x45\xf9\xf7\x2a\x89\x13\x0c\x04\xa4\x4a\x3d\xc5\x9e\x79\xef\xcd\xf3\x8b\x4d\xa8\x95\xa1\x18\x75\xe8\x01\x8c\x80\x3f\x0a\x0c\x41\xbf\xe5\x22\x39\x64\x32\x28\xff\x45\xc8\xe2\x7f\x90\x49\xcd\x42\xc6\xe8\x01\x00\x48\x71\xc0\x10\xfc\xe3\x11\x82\x7a\x09\x55\xe5\x37\xf5\x82\x54\x81\xc4\x59\xab\x65\x2b\x2f\x18\xb3\x05\xdb\x5d\x8f\x07\x20\x4c\x33\x25\x6d\xbb\xdd\x38\xdd\x44\xb0\x88\x84\xc6\x27\x24\x7d\x82\x25\xd1\xae\x6c\x0b\x0e\xb4\xf3\xb7\x69\xec\x8f\xe7\xcb\xed\x64\xb7\x7e\x9c\xef\x66\x8b\xf5\xe6\x61\x31\x9e\x5a\x98\x46\xe6\x4c\xa6\xbd\x3f\x00\xce\x90\xac\x70\xbd\x74\x24\x01\x22\x11\xbf\x9a\x62\xac\xe4\x3e\x4b\x0d\x09\xae\x3d\xf4\x4d\x00\x94\x22\xca\x31\x09\x81\xc9\x60\x5f\xcf\x55\xdc\x20\x57\x84\x7b\x24\x94\x31\xba\x9c\x4f\x25\xbb\xe8\xea\x65\x33\xee\x5e\xee\x5d\x04\x4e\xee\x4e\xec\xa3\xb3\xf6\xf7\xe3\x3f\x09\x76\x42\x50\x55\x17\x89\x86\xf0\xeb\x0f\xe1\x3e\x70\xc6\x36\xdf\xbf\x77\x7d\x1b\x8d\x74\xc3\x73\xdf\x3a\x20\x8b\x7a\x6e\xe7\x36\xc1\x02\x65\xa2\x97\x4e\xc8\x23\x97\x39\x5c\xfd\x99\x0c\x9a\x66\xed\xec\xec\x42\x03\x14\x42\xeb\x77\x45\x49\x47\xb7\xdb\x81\x9b\x77\x3b\xa7\x16\xf7\xac\x74\x6d\xe2\xb7\xef\x79\xca\x70\x61\xd8\x3e\xb8\x76\xfe\x54\x96\x2b\xa5\x39\x25\xd4\x33\xf7\xa9\x95\x22\x37\x77\xa5\x07\x04\x26\x6e\x20\x56\xc0\xbf\xf8\xc9\xfe\x30\x75\x65\xcf\x77\x45\xbd\x38\xf8\x00\x75\x6b\xc3\xbb\xa2\x9e\xa5\xfa\x15\x00\x00\xff\xff\xb7\xcc\x9f\x77\x6e\x04\x00\x00")

func cloudGoogleTemplatesPostgresTmplBytes() ([]byte, error) {
	return bindataRead(
		_cloudGoogleTemplatesPostgresTmpl,
		"cloud/google/templates/postgres.tmpl",
	)
}

func cloudGoogleTemplatesPostgresTmpl() (*asset, error) {
	bytes, err := cloudGoogleTemplatesPostgresTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud/google/templates/postgres.tmpl", size: 1134, mode: os.FileMode(436), modTime: time.Unix(1520015640, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud/google/templates/mysql.tmpl": cloudGoogleTemplatesMysqlTmpl,
	"cloud/google/templates/postgres.tmpl": cloudGoogleTemplatesPostgresTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"cloud": &bintree{nil, map[string]*bintree{
		"google": &bintree{nil, map[string]*bintree{
			"templates": &bintree{nil, map[string]*bintree{
				"mysql.tmpl": &bintree{cloudGoogleTemplatesMysqlTmpl, map[string]*bintree{}},
				"postgres.tmpl": &bintree{cloudGoogleTemplatesPostgresTmpl, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

