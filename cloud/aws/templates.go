// Code generated by go-bindata.
// sources:
// cloud/aws/templates/mysql.tmpl
// cloud/aws/templates/postgres.tmpl
// DO NOT EDIT!

package aws

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudAwsTemplatesMysqlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x6d\x6b\x23\x37\x10\xfe\x9e\x5f\x31\xe8\x53\x0b\x3e\xe3\xcb\xd1\x2b\xb7\x94\x82\xb3\x76\xc2\xc2\x25\x75\xb3\xa9\x0f\x7a\xe4\x83\xbc\x3b\x36\xe2\x64\x49\x27\x69\x73\xf8\x8c\xff\x7b\xd1\xbe\x6b\x5f\x9c\x17\x68\x3e\x04\xa3\x99\x67\xe6\xd1\x68\x9e\x91\xf6\x78\x84\x14\xb7\x4c\x20\x10\x8d\x46\x66\x3a\x41\x02\xa7\xd3\x05\xc0\xf1\x02\x00\x80\xcc\xbf\xc4\x0f\xb8\x57\x9c\x5a\xbc\x96\x7a\x4f\xed\x1a\xb5\x61\x52\x10\x08\x80\x5c\xce\xde\xcf\xde\xcd\x3e\xbd\x9b\x7d\x22\x93\xc2\x3d\x94\x22\x65\x96\x49\x61\x48\x50\x86\x00\x20\x2b\xcd\x9e\xa8\x45\xb7\x04\xe4\x5a\x04\xc1\xf2\x7b\x46\xb9\x73\xf9\xea\x56\xee\x71\x4b\x82\xc6\x0b\x4e\x13\x20\x56\x67\x48\xe0\x11\x4e\x79\x8c\x53\x19\x7e\x45\x35\xdd\xa3\x45\xed\x85\x9f\x73\x2e\x13\x6a\x31\x8d\xad\xd4\x74\x87\x2d\x1b\x00\x79\x38\x28\xcc\xd9\xde\x65\xfb\x0d\xea\x92\x69\x6e\x5a\xe0\x96\x66\xdc\xe6\xd6\xf7\x33\xdf\x62\x12\xcd\x94\xad\x76\x5a\xa7\x00\x53\xe4\x00\xc3\x7e\x22\xfc\x72\x73\xf5\x2b\x29\x51\xa7\x0a\x4e\x16\xd4\xd2\x0d\x35\x63\x3c\x62\xab\x99\xd8\x8d\xf1\xa0\x4a\x9d\x23\x52\xba\x42\x5a\xe6\x00\x41\xf7\xd8\xa7\x10\x09\x63\xa9\x48\x30\x4f\xfa\x16\x1a\xe9\x66\x6a\x2f\xa7\x7b\x96\x68\x79\x8e\x4e\x95\x07\x12\x4e\x8d\x81\xad\xd4\x2d\x66\x32\x45\xd3\xa7\x76\x9b\x71\xcb\xe6\xff\xbe\x89\xd5\x96\x72\x83\xe7\xf8\xe4\xc1\x15\x47\xa0\x4f\x94\x71\xba\x61\x9c\xd9\x03\xfc\x94\x62\xa0\x46\x2b\x6a\xcc\x0f\xa9\xd3\x57\x30\xf1\x93\xc5\xa8\x9f\x50\x83\xaa\xe2\xf4\x33\x34\x7d\xdf\x49\xf0\x6c\xfc\x00\x48\xa8\x91\x5a\x04\x26\x40\x15\x71\xc0\x64\x1b\x81\xd6\x0c\x55\x67\xa8\x38\xae\x69\x7f\x60\xba\xa6\x3c\xc3\x42\x6c\x85\xac\x26\x95\x2f\x3c\xf6\x28\xc7\x65\x8a\x41\xca\x9f\x99\xb1\x7f\xcc\xbf\xc4\x41\xb0\x0c\x2f\x83\xa0\xf0\x0d\x82\x28\xfd\xf3\xcc\x36\xd6\xab\xb0\x26\x3e\x96\x6e\xbc\x50\xf0\x8a\xb4\x4d\x9f\x9c\x3b\x35\xc7\xa7\x5b\xd0\x1e\xaf\x7f\x0c\xea\x5c\x59\xff\x83\x84\xcb\xb6\xc9\xaa\x14\xbd\xe4\xd5\x88\xf5\x72\x77\xab\x5a\xf8\x80\xdc\xc2\xed\x21\xfe\xfb\xf3\x48\x4f\xfc\x36\xfd\x7d\xfa\xfe\x63\xdb\xd8\x69\xbf\x7e\x72\x95\x0c\x1f\x7e\x73\x00\xeb\x55\xe8\xaa\x7f\xfe\xcc\x07\x23\x87\x2c\xd5\xe7\xb7\xb5\x0a\x21\x8c\x16\xf7\x70\xc5\x65\xf2\xed\x05\xbc\xbd\xeb\xe1\xaf\xcc\xaa\xcc\xfa\x57\x8f\xd4\xf6\xc3\x87\xd9\xc7\x87\x44\xcd\xd3\x22\x39\x90\x5c\x11\xcd\x6d\x74\x83\x76\x6e\x6d\x21\x90\x6a\xa0\x39\x91\x2c\x45\xaa\x24\x13\x76\xea\x90\x68\x4c\x7e\x1f\xb5\xe5\xdd\xc4\x76\x3f\xdf\x16\x3b\x47\x76\x02\x2f\xc5\xd3\xed\xc1\x7c\xe7\xed\x8b\xc4\x8b\x5c\xde\x98\xb5\x7d\x10\xdd\x9e\x6f\x43\xe8\xda\x3e\x88\x6e\x2b\x60\x08\x5d\xdb\x1d\xda\x3b\x85\xfb\xf2\x21\xe1\x9d\x43\x8c\x49\xa6\x99\x3d\xdc\x68\x99\xa9\xe7\x1a\xcc\x77\x6e\x35\xc1\x4a\x4b\x85\xda\x32\xf4\x07\x14\x00\xc9\x5d\x3b\xcd\xb4\x77\xfb\x80\xfa\x5d\x33\x69\xfb\x7b\x29\x22\xb1\xcb\xcf\x37\x80\xaf\x2d\x1f\x70\xbb\x8d\xd4\x4a\x4b\x2b\x13\xc9\x5d\x44\x9b\x28\x77\x78\xd7\x5a\xee\xcb\x13\x27\xae\x01\xdc\xda\x83\xec\xae\xb8\x66\x8f\x94\x57\xb4\x4a\x02\x75\xcd\x8a\xbf\x47\x8f\xda\x5a\x25\x51\xda\x85\x91\x16\xe0\x34\x32\x46\x9f\xab\xed\xfd\x22\x0e\x82\xc5\x55\xdb\xf9\x45\xb5\xf5\x20\xaf\xa9\x71\x8e\x8a\x52\xd3\xc8\x21\xda\x16\x52\xa8\x06\xfe\xa4\x5b\xef\x72\xc7\x9d\x7b\xa1\xd9\xea\x88\x23\xf1\xeb\x79\xb6\x58\xb5\x0c\x9f\xad\x54\x23\xd8\x97\x94\x69\xe8\x19\x5a\xf3\xec\x19\xfd\x2d\x91\x26\x59\xe8\x5e\x52\x1e\xd6\x7b\xcc\x8d\xe2\xa2\x14\x85\x65\x5b\x86\xda\x4f\xec\xf6\x13\x5b\x9a\x7c\xbb\x2b\xd4\xda\x81\xdf\xd5\x1a\xef\x0f\x95\xc9\x68\x17\xf4\x50\xed\xa6\xea\x00\x97\x62\xc7\x04\xd6\xcd\x42\x06\x8c\xad\x1b\xaf\x69\xfa\xea\x43\xc3\x8f\x76\x4b\x8d\x45\xed\x4f\xa7\xfe\x48\x1a\x81\xf8\x23\xb1\x3f\x07\x7d\x58\xf3\x50\xad\x7d\xab\xb5\x8e\xab\x2f\x7d\xcf\x92\x6d\x38\x4b\xf8\x61\x9e\x24\x68\x0c\xdb\x70\x1c\x7a\xaa\x39\xb1\x14\x7d\x51\xb5\xe1\x4e\x5d\xfa\xf6\xf5\x2a\xf4\x66\x56\xf7\xeb\xc9\x9f\x99\x70\xaa\xdf\x76\x2d\x09\x5c\x54\xff\x4f\x17\xc7\x23\xa0\x48\xdd\xa7\xde\x7f\x01\x00\x00\xff\xff\x85\x93\xf3\xea\x03\x0e\x00\x00")

func cloudAwsTemplatesMysqlTmplBytes() ([]byte, error) {
	return bindataRead(
		_cloudAwsTemplatesMysqlTmpl,
		"cloud/aws/templates/mysql.tmpl",
	)
}

func cloudAwsTemplatesMysqlTmpl() (*asset, error) {
	bytes, err := cloudAwsTemplatesMysqlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud/aws/templates/mysql.tmpl", size: 3587, mode: os.FileMode(420), modTime: time.Unix(1499927431, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cloudAwsTemplatesPostgresTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func cloudAwsTemplatesPostgresTmplBytes() ([]byte, error) {
	return bindataRead(
		_cloudAwsTemplatesPostgresTmpl,
		"cloud/aws/templates/postgres.tmpl",
	)
}

func cloudAwsTemplatesPostgresTmpl() (*asset, error) {
	bytes, err := cloudAwsTemplatesPostgresTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud/aws/templates/postgres.tmpl", size: 0, mode: os.FileMode(420), modTime: time.Unix(1499927421, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud/aws/templates/mysql.tmpl": cloudAwsTemplatesMysqlTmpl,
	"cloud/aws/templates/postgres.tmpl": cloudAwsTemplatesPostgresTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"cloud": &bintree{nil, map[string]*bintree{
		"aws": &bintree{nil, map[string]*bintree{
			"templates": &bintree{nil, map[string]*bintree{
				"mysql.tmpl": &bintree{cloudAwsTemplatesMysqlTmpl, map[string]*bintree{}},
				"postgres.tmpl": &bintree{cloudAwsTemplatesPostgresTmpl, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

