{{ define "tupleSerializer" }}
// UnmarshalJSON unmarshals this tuple type from a JSON array
func ({{.ReceiverName}} *{{ pascalize .Name }}) UnmarshalJSON(data []byte) error {
  // stage 1, get the array but just the array
  var stage1 []json.RawMessage
  buf := bytes.NewBuffer(raw)
  dec := json.NewDecoder(buf)
  dec.UseNumber()

  if err := dec.Decode(&stage1); err != nil {
    return err
  }

  // stage 2{{ if .AdditionalItems }}
  var lastIndex int
  {{ end }}
  {{ range $idx, $val := .Properties }}if len(stage1) > {{ $idx }} {
    buf = bytes.NewBuffer(stage1[{{ $idx }}])
    dec := json.NewDecoder(buf)
    dec.UseNumber()
    if err := dec.Decode({{ if (not $val.IsNullable) }}&{{ end }}{{ $val.ReceiverName }}.{{ pascalize $val.Name }}); err != nil {
      return err
    }{{ if $.AdditionalItems }}
    lastIndex = {{ $idx }}{{end}}
  }
  {{ end }}
  {{ if .AdditionalItems }}
  if len(stage1) > lastIndex+1 {
    for _, val := range stage1[lastIndex+1:] {
      var toadd {{ template "schemaType" .AdditionalItems }}
      buf = bytes.NewBuffer(val)
      dec := json.NewDecoder(buf)
      dec.UseNumber()
      if err := dec.Decode({{ if not .AdditionalItems.IsNullable }}&{{ end }}toadd); err != nil {
        return err
      }
      {{ .ValueExpression }} = append({{ .ValueExpression }}, toadd)
    }
  }
  {{ end }}return nil
}

// MarshalJSON marshals this tuple type into a JSON array
func ({{.ReceiverName}} {{ pascalize .Name }}) MarshalJSON() ([]byte, error) {
  data := []interface{}{
  {{ range .Properties }}{{ pascalize .Name }},
  {{ end }} }
  {{ if .AdditionalItems }}
  for _, v := range {{ .AdditionalItems.ValueExpression }} {
    data = append(data, v)
  }
  {{ end }}
  return json.Marshal(data)
}
{{ end }}
{{ define "discriminatedSerializer" }}
// UnmarshalJSON unmarshals this polymorphic type from a JSON structure
func ({{.ReceiverName}} *{{ pascalize .Name }}) UnmarshalJSON(raw []byte) error {
  var data {{ template "subTypeBody" . }}

  buf := bytes.NewBuffer(raw)
  dec := json.NewDecoder(buf)
  dec.UseNumber()

  if err := dec.Decode(&data); err != nil {
    return err
  }

  {{ range .AllOf }}{{ range .Properties }}{{ if ne $.DiscriminatorField .Name }}{{.ReceiverName}}.{{ if .IsBaseType}}{{ camelize .Name }}Field{{ else }}{{ pascalize .Name }}{{ end }} = data.{{ pascalize .Name }}
  {{ end }}{{ end }}{{ end }}{{ range .Properties }}{{ if ne $.DiscriminatorField .Name }}data.{{ pascalize .Name }} = {{ .ReceiverName }}.{{ if .IsBaseType}}{{ camelize .Name }}Field{{ else }}{{ pascalize .Name }}{{ end }}
  {{ end }}{{ end }}
  return nil
}

// MarshalJSON marshals this polymorphic type to a JSON structure
func ({{.ReceiverName}} {{ pascalize .Name }}) MarshalJSON() ([]byte, error) {
  var data {{ template "subTypeBody" . }}

  {{ range .AllOf }}{{ range .Properties }}{{ if ne $.DiscriminatorField .Name }}data.{{ pascalize .Name }} = {{ .ReceiverName }}.{{ if .IsBaseType}}{{ camelize .Name }}Field{{ else }}{{ pascalize .Name }}{{ end }}
  {{ end }}{{ end }}{{ end }}{{ range .Properties }}{{ if ne $.DiscriminatorField .Name }}data.{{ pascalize .Name }} = {{ .ReceiverName }}.{{ if .IsBaseType}}{{ camelize .Name }}Field{{ else }}{{ pascalize .Name }}{{ end }}
  {{ end }}{{ end }}data.{{ pascalize .DiscriminatorField }} = {{ printf "%q" .DiscriminatorValue }}
  return json.Marshal(data)
}
{{ end }}
{{ define "hasDiscriminatedSerializer" }}
// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func ({{.ReceiverName}} *{{ pascalize .Name }}) UnmarshalJSON(raw []byte) error {
  var data struct {
    {{ range .AllOf }}
    {{ if or (and .IsBaseType .IsExported) .IsAnonymous }}{{ range .Properties }}
    {{ if not $.IsExported }}{{ if $.IsTuple }}{{ template "privtuplefield" . }}{{ else }}{{template "privstructfield" . }}{{ end }}{{ else }}{{ if $.IsTuple }}{{ template "tuplefield" . }}{{ else }}{{template "structfield" . }}{{ end }}{{ end}}
    {{ end }}{{ if .HasAdditionalProperties }}{{ if .AdditionalProperties }}{{ if .IsExported }}{{ pascalize .AdditionalProperties.Name }}{{ else }}{{ .AdditionalProperties.Name }}{{ end }} map[string]{{ template "schemaType" .AdditionalProperties }} `json:"-"`  {{end}}{{ end }}
    {{ if .AdditionalItems }}{{ if and .IsExported }}{{ pascalize .AdditionalItems.Name }}{{ else }}{{ .AdditionalItems.Name }}{{ end }} []{{ template "schemaType" .AdditionalItems }} `json:"-"`
    {{ end }}
    {{ else }}
    {{ if not (and .IsBaseType .IsExported) }}{{ .GoType }}{{ end }}{{ end }}
    {{ end }}
    {{range .Properties}}{{ if not .IsBaseType }}
    {{ if not $.IsExported }}{{template "privstructfield" . }}{{ else }}{{ pascalize .Name}} {{ template "schemaType" . }} `json:"{{ .Name }}{{ if not .Required }},omitempty{{ end }}"`{{ end}}
    {{else}}
    {{ if not $.IsExported }}{{template "privstructfield" . }}{{ else }}{{ pascalize .Name}} json.RawMessage `json:"{{ .Name }}{{ if not .Required }},omitempty{{ end }}"`{{ end}}
    {{end}}{{ end }}
    {{ if .HasAdditionalProperties }}{{ if and .IsExported }}{{ pascalize .AdditionalProperties.Name }}{{ else }}{{ pascalize .AdditionalProperties.Name }}Field{{ end }} map[string]{{ template "schemaType" .AdditionalProperties }} `json:"-"`
    {{ end }}
    {{ if .AdditionalItems }}{{ if and .IsExported (not .IsSubType) }}{{ pascalize .AdditionalItems.Name }}{{ else }}{{ pascalize .AdditionalItems.Name }}Field{{ end }} []{{ template "schemaType" .AdditionalItems }} `json:"-"`
    {{ end }}
  }

  buf := bytes.NewBuffer(raw)
  dec := json.NewDecoder(buf)
  dec.UseNumber()

  if err := dec.Decode(&data); err != nil {
  	return err
  }

  {{ range .AllOf }}{{ if .IsAnonymous }}{{ range $idx, $val := .Properties }}{{ if .IsBaseType }}allOf{{ $idx }}{{ pascalize $val.Name }}, err := Unmarshal{{ $val.GoType }}(bytes.NewBuffer(raw), runtime.JSONConsumer())
  if err != nil && err != io.EOF {
    return err
  }
  {{ end }}{{ end }}{{ end }}{{ end}}{{ range .Properties }}{{ if and ( not .IsArray ) .IsBaseType }}{{ camelize .Name }}, err := Unmarshal{{ .GoType }}(bytes.NewBuffer(data.{{ pascalize .Name}}), runtime.JSONConsumer())
  if err != nil && err != io.EOF {
    return err
  }{{ else if and .IsArray .IsBaseType }}var {{ camelize .Name }} {{ .GoType }}

  buf = bytes.NewBuffer(raw)
  dec = json.NewDecoder(buf)
  dec.UseNumber()

  untypedObj := make(map[string]interface{})
  if err := dec.Decode(&untypedObj); err != nil {
    return err
  }
  if untyped{{ pascalize .Name }}, ok := untypedObj[{{ printf "%q" .Name }}]; ok {
    if slc{{ pascalize .Name}}, ok := untyped{{ pascalize .Name }}.([]interface{}); ok {
      for _, slcEl := range slc{{ pascalize .Name }} {
        slcJSON, _ := json.Marshal(slcEl)
        slcObj, err := Unmarshal{{ .Items.GoType }}(bytes.NewBuffer(slcJSON), runtime.JSONConsumer())
        if err != nil && err != io.EOF {
          return err
        }
        {{ camelize .Name }} = append({{ camelize .Name }}, slcObj)
      }
    }
  }
  {{ end }}
  {{ end }}


  var result {{ pascalize .Name }}
  {{ range .AllOf }}{{ if .IsAnonymous }}{{ range $idx, $val := .Properties }}result.{{ if $val.IsBaseType}}{{ camelize $val.Name }}Field{{ else }}{{ pascalize $val.Name }}{{ end }} = {{ if $val.IsBaseType }}allOf{{ $idx}}{{ pascalize $val.Name }}{{ else }}data.{{ pascalize $val.Name}}{{ end }}
  {{ end }}{{ end }}{{ end}}{{ range .Properties }}result.{{ pascalize .Name }} = {{ if .IsBaseType }}{{ camelize .Name }}{{ else }}data.{{ pascalize .Name}}{{ end }}
  {{ end }}*{{ .ReceiverName }} = result
  return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func ({{.ReceiverName}} {{ pascalize .Name }}) MarshalJSON() ([]byte, error) { {{ $receiverName := .ReceiverName }}
	var b1, b2 []byte
	var err error
	b1, err = json.Marshal({{ template "withoutBaseTypeBody" . }}{
  {{ range .AllOf }}{{ if .IsAnonymous }}{{ range .Properties }}{{ if not .IsBaseType }}{{ pascalize .Name }}: {{ $receiverName }}.{{ pascalize .Name }},
  {{ end }}{{ end }}{{ end }}{{ end }}{{ range .Properties }}{{ if not .IsBaseType }}{{ pascalize .Name }}: {{ $receiverName }}.{{ pascalize .Name }},
  {{ end }}{{ end }}
  })
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct{ {{ range .AllOf }}{{ if .IsAnonymous }}{{ range .Properties }}{{ if .IsBaseType }}
    {{ pascalize .Name }} {{ template "schemaType" . }} `json:"{{ .Name }}{{ if not .Required }},omitempty{{ end }}"`
  {{ end }}{{ end }}{{ end }}{{ end }}{{ range .Properties }}{{ if .IsBaseType }}
    {{ pascalize .Name }} {{ template "schemaType" . }} `json:"{{ .Name }}{{ if not .Required }},omitempty{{ end }}"`
  {{ end }}{{end}}}{ {{ range .AllOf }}{{ if .IsAnonymous }}{{ range .Properties }}{{ if .IsBaseType }}
    {{ pascalize .Name }}: {{ $receiverName }}.{{ if $.IsSubType}}{{ camelize .Name }}Field{{ else }}{{ pascalize .Name }}{{ end }},
  {{ end }}{{ end }}{{ end }}{{ end }}{{ range .Properties }}{{ if .IsBaseType }}
    {{ pascalize .Name }}: {{ $receiverName }}.{{ if $.IsSubType}}{{ camelize .Name }}Field{{ else }}{{ pascalize .Name }}{{ end }},
  {{end}}{{ end }}})
	if err != nil {
		return nil, err
	}
	return swag.ConcatJSON(b1, b2), nil
}
{{ end }}
{{ define "allOfSerializer" }}{{ $receiverName := .ReceiverName }}
// UnmarshalJSON unmarshals this object from a JSON structure
func ({{.ReceiverName}} *{{ pascalize .Name }}) UnmarshalJSON(raw []byte) error {
  {{ range .AllOf }}
   {{ if .Properties }}var data struct {
    {{range .Properties}}{{ if not .IsBaseType }}
    {{ if not $.IsExported }}{{template "privstructfield" . }}{{ else }}{{ pascalize .Name}} {{ template "schemaType" . }} `json:"{{ .Name }}{{ if not .Required }},omitempty{{ end }}"`{{ end}}
    {{else}}
    {{ if not $.IsExported }}{{template "privstructfield" . }}{{ else }}{{ pascalize .Name}} json.RawMessage `json:"{{ .Name }}{{ if not .Required }},omitempty{{ end }}"`{{ end}}
    {{end}}{{ end }}
    {{ if .HasAdditionalProperties }}{{ if and .IsExported }}{{ pascalize .AdditionalProperties.Name }}{{ else }}{{ pascalize .AdditionalProperties.Name }}Field{{ end }} map[string]{{ template "schemaType" .AdditionalProperties }} `json:"-"`
    {{ end }}
    {{ if .AdditionalItems }}{{ if and .IsExported (not .IsSubType) }}{{ pascalize .AdditionalItems.Name }}{{ else }}{{ pascalize .AdditionalItems.Name }}Field{{ end }} []{{ template "schemaType" .AdditionalItems }} `json:"-"`
    {{ end }}
   }
   if err := swag.ReadJSON(raw, &data); err != nil {
     return err
   }
   {{ range .Properties }}
   {{ $receiverName }}.{{ pascalize .Name }} = data.{{ pascalize .Name }}
   {{ end }}

  {{ end }}
  {{ if not .IsAnonymous }}
   var {{ varname .Name }} {{ .GoType }}
   if err := {{ if .IsBaseType}}Unmarshal{{ .GoType }}(bytes.NewBuffer(raw), &{{ varname .Name }}){{ else }} swag.ReadJSON(raw, &{{ varname .Name }}){{ end }}; err != nil {
     return err
   }
   {{ .ReceiverName }}.{{ stripPackage .GoType "" }} = {{ varname .Name }}
   {{ end }}
   {{ end }}
  return nil
}

// MarshalJSON marshals this object to a JSON structure
func ({{.ReceiverName}} {{ pascalize .Name }}) MarshalJSON() ([]byte, error) {
    var _parts [][]byte
  {{ range .AllOf }}
    {{ if .Properties }}var data struct {
    {{range .Properties}}{{ if not .IsBaseType }}
    {{ if not $.IsExported }}{{template "privstructfield" . }}{{ else }}{{ pascalize .Name}} {{ template "schemaType" . }} `json:"{{ .Name }}{{ if not .Required }},omitempty{{ end }}"`{{ end}}
    {{else}}
    {{ if not $.IsExported }}{{template "privstructfield" . }}{{ else }}{{ pascalize .Name}} json.RawMessage `json:"{{ .Name }}{{ if not .Required }},omitempty{{ end }}"`{{ end}}
    {{end}}{{ end }}
    {{ if .HasAdditionalProperties }}{{ if and .IsExported }}{{ pascalize .AdditionalProperties.Name }}{{ else }}{{ pascalize .AdditionalProperties.Name }}Field{{ end }} map[string]{{ template "schemaType" .AdditionalProperties }} `json:"-"`
    {{ end }}
    {{ if .AdditionalItems }}{{ if and .IsExported (not .IsSubType) }}{{ pascalize .AdditionalItems.Name }}{{ else }}{{ pascalize .AdditionalItems.Name }}Field{{ end }} []{{ template "schemaType" .AdditionalItems }} `json:"-"`
    {{ end }}
   }
   {{ range .Properties }}
   data.{{ pascalize .Name }} = {{ $receiverName }}.{{ pascalize .Name }}
   {{ end }}
   jsonData, err := swag.WriteJSON(data)
   if err != nil {
     return nil, err
   }
   _parts = append(_parts, jsonData)
   {{ end }}
   {{ if not .IsAnonymous }}
   {{ varname .Name }}, err := swag.WriteJSON({{ $receiverName }}.{{ stripPackage .GoType "" }})
   if err != nil {
     return nil, err
   }
   _parts = append(_parts, {{ varname .Name }})
   {{ end }}
   {{ end }}
   return swag.ConcatJSON(_parts...), nil
}
{{ end }}
{{ define "schemaSerializer" }}
{{- if .IsSubType }}
{{ if not .HasBaseType }}
{{ template "discriminatedSerializer" . }}{{ end}}
{{ else if .IsTuple }}
{{ template "tupleSerializer" . }}
{{ else if .IsAdditionalProperties }}
{{ template "additionalPropertiesSerializer" . }}
{{ end -}}
{{ if .HasBaseType -}}
{{ template "hasDiscriminatedSerializer" . }}
{{- else if and (gt (len .AllOf) 0) (not .IsSubType ) -}}
{{ template "allOfSerializer" . }}
{{ end -}}
{{ end }}
