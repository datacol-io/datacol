syntax = "proto3";
package controller;

import "google/api/annotations.proto";
import "ptypes/empty/empty.proto";
import "ptypes/duration/duration.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/datacol-io/datacol/api/models/types.proto";

option go_package = "controller";
option (gogoproto.sizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;

message ListRequest {
  int32 offset = 1;
  int32 limit = 2;
}

message AppRequest {
  string name = 1;
  string repo_url = 2;
}

message AppListResponse {
  repeated models.App apps = 1 [(gogoproto.nullable) = false];
  int32 limit = 2;
  int32 offset = 3;
}

message AuthRequest {
  string password = 1;
}

message AuthResponse {
  string host = 1;
  string name = 2;
  string project = 3;
  string region = 4;
  string provider = 5;
}

message CreateBuildRequest {
  string app = 1;
  string version = 2;
  bytes procfile = 3;
}

message AppIdRequest {
  string app = 1;
  string id = 2;
}

message BuildLogRequest {
  string app = 1;
  string id = 2;
  int32  pos = 3;
}

message BuildLogResponse {
  int32 pos = 1;
  repeated string lines = 2;
}

message EnvSetRequest {
  string name = 1;
  string data = 2;
}

message ResourceListResponse {
  repeated models.Resource resources = 1;
}

message BuildListResponse {
  repeated models.Build builds = 1;
}

message ProcessListResponse {
  repeated models.Process Items = 1;
}

message CreateResourceRequest {
  string name = 1;
  string kind = 2;
  map<string,string> params = 3;
}

message AppResourceReq {
  string app = 1;
  string name = 2;
 }

message KubectlReq {
  repeated string args = 1;
}

message CmdResponse {
  int32  exit_code = 1;
  string err       = 2;
  string stdOut    = 3;
  string stdErr    = 4;
}

message LogStreamReq {
  string name = 1;
  bool follow = 2;
  google.protobuf.Duration since = 3;
  string proctype = 4;
}

message ProcessRunReq {
  string name = 1;
  repeated string command = 2;
}

message StreamMsg {
  bytes data = 1;
}

message ReleaseListResponse {
  repeated models.Release releases = 1;
}

message CreateReleaseRequest {
  models.Build build = 1;
  string domain = 2;
}

service ProviderService {
  rpc Auth(AuthRequest) returns (AuthResponse) {
    option (google.api.http) = {
      post: "/v1/auth",
      body: "*"
    };
  }

  // Account api
  rpc AppList(ListRequest) returns (AppListResponse) {
    option (google.api.http) = {
      get: "/v1/apps"
    };
  }

  rpc AppCreate(AppRequest) returns (models.App) {
    option (google.api.http) = {
      post: "/v1/apps"
      body: "*"
    };
  }

  rpc AppGet(AppRequest) returns (models.App) {
    option (google.api.http) = {
      get: "/v1/apps/{name}"
    };
  }

  rpc AppRestart(AppRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get: "/v1/apps/{name}/restart"
    };
  }

  rpc AppDelete(AppRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/apps/{name}"
    };
  }

  //Build Api
  rpc BuildCreate(CreateBuildRequest) returns (models.Build) {
    option (google.api.http) = {
      post: "/v1/builds"
    };
  }

  rpc BuildImport(stream StreamMsg) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/builds/import"
    };
  }

  rpc BuildRelease(CreateReleaseRequest) returns (models.Release) {
    option (google.api.http) = {
      post: "/v1/releases"
    };
  }

  rpc BuildGet(AppIdRequest) returns (models.Build) {
    option (google.api.http) = {
      get: "/v1/builds/{id}"
    };
  }

  rpc BuildDelete(AppIdRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/builds/{id}"
    };
  }

  rpc BuildList(AppRequest) returns (BuildListResponse) {
    option (google.api.http) = {
      get: "/v1/builds/{name}"
    };
  }

  rpc BuildLogs(BuildLogRequest) returns (BuildLogResponse) {
    option (google.api.http) = {
      get: "/v1/builds/{id}/logs"
    };
  }

  rpc EnvironmentGet(AppRequest) returns (models.EnvConfig) {
    option (google.api.http) = {
      get: "/v1/env/{name}"
    };
  }

  rpc EnvironmentSet(EnvSetRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/env/{name}"
    };
  }

  // Release endpoints
  rpc ReleaseList(AppRequest) returns (ReleaseListResponse) {
    option (google.api.http) = {
      get: "/v1/releases/{name}"
    };
  }

  rpc ReleaseDelete(AppIdRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/releases/{app}/{id}"
    };
  }

  // Resource endpoints
  rpc ResourceList(ListRequest) returns (ResourceListResponse) {
    option (google.api.http) = {
      get: "/v1/resources"
    };
  }

  rpc ResourceGet(AppRequest) returns (models.Resource) {
    option (google.api.http) = {
      get: "/v1/resources/{name}"
    };
  }

  rpc ResourceCreate(CreateResourceRequest) returns (models.Resource) {
    option (google.api.http) = {
      post: "/v1/resources"
    };
  }

  rpc ResourceDelete(AppRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/resources/{name}"
    };
  }

  rpc ResourceLink(AppResourceReq) returns (models.Resource) {
    option (google.api.http) = {
      put: "/v1/resources/{name}/link/{app}"
    };
  }

  rpc ResourceUnlink(AppResourceReq) returns (models.Resource) {
    option (google.api.http) = {
      put: "/v1/resources/{name}/unlink/{app}"
    };
  }

  // kubectl api wrappers
  rpc Kubectl(KubectlReq) returns (CmdResponse) {
    option (google.api.http) = {
      get: "/v1/kubectl"
    };
  }

  // Process api
  rpc ProcessRun(stream StreamMsg) returns (stream StreamMsg) {
    option (google.api.http) = { 
      get: "/v1/process/run"
    };
  }

  rpc ProcessList(AppRequest) returns (ProcessListResponse) {
    option (google.api.http) = { 
      get: "/v1/process/list"
    };
  }

  rpc ProcessSave(models.Formation) returns (google.protobuf.Empty) {
    option (google.api.http) = { 
      get: "/v1/process/formation"
    };
  }

  //Logs API
  rpc LogStream(LogStreamReq) returns (stream StreamMsg) {
    option (google.api.http) = {
      get: "/v1/logs/{name}"
    };
  }

}

